@page "/"
@using Shared
@inject Toronto.Concerts.Services.IConcertDataService concertService;
@inject NavigationManager UriHelper


@if (concertService.Busy)
{
    <Microsoft.Fast.Components.FluentUI.FluentProgressRing />
}
else
{
    <ErrorRenderer @ref="errorRenderer">

        <FluentAccordion ExpandMode="AccordionExpandMode.Multi"
                         @ref="accordion"
                         >
            @{
                var grouped = concertService.Concerts.GroupBy(c => c.DateAndTime.Date);
            }
            @foreach (var item in grouped)
            {
                string heading = string.Empty;
                try
                {
                    heading = $"{item.Key.DayOfWeek} {item.Key.ToString("MMMM dd")} ({item.Count()})";
                    if (item.Key.Date.Equals(DateTime.Now.Date))
                    {
                        heading = $"Today ({item.Count()})";
                    }
                    if (item.Key.Date.Equals(DateTime.Now.AddDays(1).Date))
                    {
                        heading = $"Tomorrow ({item.Count()})";
                    }
                }
                catch (Exception ex)
                {

                }
                <FluentAccordionItem Heading="@heading" Expanded="false" @onexpandedchange="@ExpandedChanged" @key="@heading">
                    <Radzen.Blazor.RadzenRow>

                        @foreach (var concert in item)
                        {
                            string img = getImageNameForTile(concert);

                            <Radzen.Blazor.RadzenColumn>
                                <RadzenButton Click="@(async(args) =>
                                                               {
                                                                   try
                                                                   {
                                                                       concertService.SelectedConcert = concert;
                                                                       UriHelper.NavigateTo("/concert-detail");
                                                                   }
                                                                   catch(Exception ex)
                                                                   {
                                                                       throw;
                                                                   }
                                              })"
                                              Class="grid-item grow"
                                              Variant="Variant.Outlined"
                                              ButtonStyle="@(!string.IsNullOrEmpty(img) ? ButtonStyle.Light : ButtonStyle.Secondary)"
                                              ButtonType="Radzen.ButtonType.Button">
                                    <table style="background-image: url('@img'); align-self:center;background-color:black">

                                        <tr>
                                            <td>
                                                <p style="font-weight:bold">@concert.title</p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <p style="font-size:smaller;vertical-align:bottom">@concert.presenter</p>
                                            </td>
                                        </tr>
                                    </table>
                                </RadzenButton>
                            </Radzen.Blazor.RadzenColumn>}
                    </Radzen.Blazor.RadzenRow>
                </FluentAccordionItem>
            }
        </FluentAccordion>
    </ErrorRenderer>

}
@code
{
    protected ErrorRenderer errorRenderer = default!;
    protected FluentAccordion accordion;
    void ExpandedChanged(TreeChangeEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine($"TreeChanged - {args.AffectedId}");
    }

    protected override void OnParametersSet()
    {
    }
    private string getImageNameForTile(Data.Concert concert)
    {
        if (concert.performers.Contains("choir", StringComparison.InvariantCultureIgnoreCase) || concert.performers.Contains("elmer iseler", StringComparison.InvariantCultureIgnoreCase) || concert.performers.Contains("singers", StringComparison.InvariantCultureIgnoreCase) || concert.presenter.Contains("singers", StringComparison.InvariantCultureIgnoreCase) || concert.presenter.Contains("choir", StringComparison.InvariantCultureIgnoreCase))
            return "/choir_2.jpg";
        if (concert.performers.Contains("orchestra", StringComparison.InvariantCultureIgnoreCase) || concert.presenter.Contains("orchestra", StringComparison.InvariantCultureIgnoreCase))
            return "/orchestra.jpg";
        if (concert.performers.Contains("symphony", StringComparison.InvariantCultureIgnoreCase) || concert.presenter.Contains("symphony", StringComparison.InvariantCultureIgnoreCase))
            return "/orchestra.jpg";
        if (concert.performers.Contains("opera", StringComparison.InvariantCultureIgnoreCase) || concert.presenter.Contains("opera", StringComparison.InvariantCultureIgnoreCase))
            return "/opera.jpg";
        if (concert.performers.Contains("piano", StringComparison.InvariantCultureIgnoreCase) || concert.presenter.Contains("piano", StringComparison.InvariantCultureIgnoreCase) || concert.title.Contains("piano", StringComparison.InvariantCultureIgnoreCase))
            return "/piano.jpg";
        if (concert.performers.Contains("organ", StringComparison.InvariantCultureIgnoreCase) || concert.presenter.Contains("organ", StringComparison.InvariantCultureIgnoreCase))
            return "/organ.jpg";
        if (concert.performers.Contains("chamber", StringComparison.InvariantCultureIgnoreCase) || concert.title.Contains("chamber", StringComparison.InvariantCultureIgnoreCase) || concert.performers.Contains("quartet", StringComparison.InvariantCultureIgnoreCase) || concert.title.Contains("quartet", StringComparison.InvariantCultureIgnoreCase) || concert.performers.Contains("ensemble", StringComparison.InvariantCultureIgnoreCase) || concert.title.Contains("ensemble", StringComparison.InvariantCultureIgnoreCase) || concert.performers.Contains("consort", StringComparison.InvariantCultureIgnoreCase))
            return "/chamber_music.jpg";

        return "/3_fiddlers_in_silhouette.svg";
    }
    protected override async Task OnInitializedAsync()
    {
        System.Diagnostics.Debug.WriteLine("OnInitalizedAsync");
        if (concertService.Concerts == null || concertService.Concerts.Count() == 0)
        {
            System.Diagnostics.Debug.WriteLine("GetConcerts from OnInitializedAsync");
            await concertService.GetConcerts();
        }
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        System.Diagnostics.Debug.WriteLine(nameof(OnParametersSetAsync));
        if (concertService.Concerts == null || concertService.Concerts.Count() == 0)
        {
            System.Diagnostics.Debug.WriteLine($"GetConcerts from {nameof(OnParametersSetAsync)}");
            await concertService.GetConcerts();
            StateHasChanged();
        }
        errorRenderer?.Recover();
        await base.OnParametersSetAsync();
    }
}
